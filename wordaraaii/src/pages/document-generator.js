// src/pages/document-generator.js

import { useState, useEffect, useRef, useCallback } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '@/lib/supabase';
import { motion } from 'framer-motion';
import Editor from '@monaco-editor/react';
import VantaBackground from '@/components/shared/VantaBackground';

// --- Helper Components & Icons ---

// A generic Icon Button for toolbars
const IconButton = ({ children, label }) => (
  <button title={label} className="p-2 rounded-md text-white/70 hover:bg-slate-700/50 hover:text-white transition-colors duration-200">
    {children}
  </button>
);

// Placeholder for the PDF viewer
const PdfPreviewPlaceholder = () => (
  <div className="w-full h-full flex flex-col items-center justify-center bg-slate-800/50 rounded-lg p-4 text-center">
    <svg xmlns="http://www.w3.org/2000/svg" className="h-24 w-24 text-slate-600 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
    </svg>
    <h3 className="text-lg font-semibold text-white/80">Live PDF Preview</h3>
    <p className="text-sm text-white/50">Your compiled document will appear here.</p>
  </div>
);

// --- Main Page Component ---

export default function DocumentGeneratorPage() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // State for editor and UI
  const [latexCode, setLatexCode] = useState(String.raw`\documentclass{article}
\title{AI Generated Document}
\author{Wordara AI}
\date{\today}

\begin{document}

\maketitle

\section{Introduction}
This is a sample document generated by AI.
Use the AI Generation button to create new content.

% Add a simple math equation
Let's define a variable:
\[ E = mc^2 \]

\end{document}
  `);
  const [isCompiling, setIsCompiling] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [dividerPos, setDividerPos] = useState(50);
  const containerRef = useRef(null);

  // --- Resizable Divider Logic ---
  const handleMouseDown = (e) => {
    e.preventDefault();
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  const handleMouseMove = useCallback((e) => {
    if (containerRef.current) {
      const rect = containerRef.current.getBoundingClientRect();
      const newDividerPos = ((e.clientX - rect.left) / rect.width) * 100;
      if (newDividerPos > 20 && newDividerPos < 80) { // Clamp the divider position
        setDividerPos(newDividerPos);
      }
    }
  }, []);

  const handleMouseUp = () => {
    document.removeEventListener('mousemove', handleMouseMove);
    document.removeEventListener('mouseup', handleMouseUp);
  };

  // --- Authentication Logic ---
  useEffect(() => {
    const getUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) router.push('/login'); else setUser(user);
      setLoading(false);
    };
    getUser();
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_, session) => {
      if (!session) router.push('/login'); else setUser(session.user);
    });
    return () => subscription.unsubscribe();
  }, [router]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen text-white bg-gray-900">
        <p className="text-xl animate-pulse">Authenticating...</p>
      </div>
    );
  }
  if (!user) return null;

  return (
    <div className="relative w-full h-screen overflow-hidden flex flex-col">
      <div className="absolute inset-0 -z-10"><VantaBackground /></div>
      
      {/* Header and Global Controls */}
      <header className="flex-shrink-0 relative z-20 flex items-center justify-between p-3 border-b border-white/10 bg-black/30">
        <h1 className="text-xl font-bold mother-of-pearl-text">LaTeX Document Editor</h1>
        <div className="flex items-center gap-4">
          <button
            onClick={() => {
              setIsGenerating(true);
              setTimeout(() => setIsGenerating(false), 2000); // Placeholder
            }}
            disabled={isGenerating}
            className="primary-button flex items-center gap-2 text-sm !py-2 !px-4"
          >
            {isGenerating ? (
              <svg className="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" /></svg>
            )}
            {isGenerating ? 'Generating...' : 'AI Generation'}
          </button>
          <button 
            onClick={() => {
              setIsCompiling(true);
              setTimeout(() => setIsCompiling(false), 1500); // Placeholder
            }}
            disabled={isCompiling}
            className="pearl-button flex items-center gap-2 text-sm !py-2 !px-4"
          >
            {isCompiling ? (
              <svg className="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h5" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 20v-5h-5" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 20v-5h5" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 4v5h-5" /></svg>
            )}
            {isCompiling ? 'Compiling...' : 'Recompile'}
          </button>
        </div>
      </header>
      
      {/* Main Content: Split View */}
      <main ref={containerRef} className="flex-grow flex flex-col md:flex-row min-h-0 relative p-4 gap-4">
        {/* Left Modal: LaTeX Editor */}
        <motion.div
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          className="glass-card flex flex-col h-full w-full md:w-auto"
          style={{ width: `calc(${dividerPos}% - 8px)` }}
        >
          <div className="flex-shrink-0 p-2 border-b border-white/10 flex items-center justify-between">
            <div className="flex items-center gap-1">
              <IconButton label="Bold (Ctrl+B)"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path><path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path></svg></IconButton>
              <IconButton label="Italic (Ctrl+I)"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="19" y1="4" x2="10" y2="4"></line><line x1="14" y1="20" x2="5" y2="20"></line><line x1="15" y1="4" x2="9" y2="20"></line></svg></IconButton>
              <IconButton label="Math Mode ($...$)"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M11.6,2.4l- lÃ©gumes.9,1.8c-0.1,0.1-0.2,0.3-0.2,0.4s0.1,0.3,0.2,0.4l6.9,6.9c0.1,0.1,0.3,0.2,0.4,0.2s0.3-0.1,0.4-0.2l1.8-1.8 c0.2-0.2,0.2-0.6,0-0.8l-6.9-6.9C12.1,2.2,11.8,2.2,11.6,2.4z M4,12.5c0-0.6,0.4-1,1-1h1c0.6,0,1,0.4,1,1v1c0,0.6-0.4,1-1,1H5 c-0.6,0-1-0.4-1-1V12.5z"/></svg></IconButton>
            </div>
            <div className="flex items-center gap-1">
              <IconButton label="Save"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg></IconButton>
            </div>
          </div>
          <div className="flex-grow min-h-0">
            <Editor
              height="100%"
              language="latex"
              theme="vs-dark"
              value={latexCode}
              onChange={(value) => setLatexCode(value || '')}
              options={{ minimap: { enabled: true }, wordWrap: 'on', fontSize: 14 }}
            />
          </div>
          <div className="flex-shrink-0 p-2 text-xs border-t border-white/10 text-white/50">
            Error/Warning Panel: All clear.
          </div>
        </motion.div>

        {/* Resizable Divider */}
        <div
          onMouseDown={handleMouseDown}
          className="hidden md:flex flex-shrink-0 w-2 h-full cursor-col-resize items-center justify-center group"
        >
          <div className="w-0.5 h-1/4 bg-slate-600 group-hover:bg-blue-500 transition-colors rounded-full" />
        </div>

        {/* Right Modal: PDF Preview */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          className="glass-card flex flex-col h-full w-full md:w-auto"
          style={{ width: `calc(${100 - dividerPos}% - 8px)` }}
        >
          <div className="flex-shrink-0 p-2 border-b border-white/10 flex items-center justify-between">
            <div className="flex items-center gap-1">
              <IconButton label="Previous Page"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg></IconButton>
              <span className="text-sm text-white/80">1 / 1</span>
              <IconButton label="Next Page"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg></IconButton>
            </div>
            <div className="flex items-center gap-1">
              <IconButton label="Zoom Out"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="8" y1="11" x2="14" y2="11"></line></svg></IconButton>
              <IconButton label="Zoom In"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="11" y1="8" x2="11" y2="14"></line><line x1="8" y1="11" x2="14" y2="11"></line></svg></IconButton>
              <IconButton label="Download PDF"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg></IconButton>
            </div>
          </div>
          <div className="flex-grow min-h-0 p-4">
            <PdfPreviewPlaceholder />
          </div>
          <div className="flex-shrink-0 p-2 text-xs border-t border-white/10 text-white/50">
            Compilation Log: Compiled successfully.
          </div>
        </motion.div>
      </main>
    </div>
  );
}